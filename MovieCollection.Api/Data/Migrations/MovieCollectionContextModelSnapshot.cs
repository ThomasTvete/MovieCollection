// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieCollection.Api.Data;

#nullable disable

namespace MovieCollection.Api.Data.Migrations
{
    [DbContext(typeof(MovieCollectionContext))]
    partial class MovieCollectionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MoviesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("DirectorMovie", b =>
                {
                    b.Property<int>("DirectorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MoviesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DirectorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("DirectorMovie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MoviesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("MovieCollection.Api.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MovieCollection.Api.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MovieCollection.Api.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Anime"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Film-Noir"
                        },
                        new
                        {
                            Id = 13,
                            Name = "History"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Indie"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Musical"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Short"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 25,
                            Name = "TV Movie"
                        },
                        new
                        {
                            Id = 26,
                            Name = "War"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("MovieCollection.Api.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("MovieCollection.Api.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCollection.Api.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectorMovie", b =>
                {
                    b.HasOne("MovieCollection.Api.Entities.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCollection.Api.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("MovieCollection.Api.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCollection.Api.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
